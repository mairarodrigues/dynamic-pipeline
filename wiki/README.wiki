#summary Instructions for running the dynamic pipeline algorithm.

= Introduction =

To run a dynamic pipeline project we provide four files: (1) the dynamic pipeline algorithm written in Java (SetPipeline), (2) the available pipelines algorithm written in Java (AvailablePipelines), (3) a sample tool registry file (ToolRegistry.txt), and (4) a sample interface program written in PHP (index.php). Requirements for using these files are below. 


= Requirements for the Java Algorithm =

  * Library jgrapht-0.8.1

  * Directory hierarchy (required beforehand):

  dynamicpipeline/java/

  dynamicpipeline/java/jgrapht-0.8.1/  

  dynamicpipeline/registry/

  dynamicpipeline/tools/

  All with read+exec permissions

  * Directory hierarchy (created on execution):
  dynamicpipeline/inputs/
  dynamicpipeline/pipelines/  
  
  All with read+exec+write permissions

  * Complementary files:
  ToolRegistry.txt (on dynamicpipeline/registry/)
 
  With read+exec+write permission

= How to Run the Java Executables =

Java executables should be run from the "dynamicpipeline/java/" directory. 
 * linux:   
{{{
java -cp ":/xxx/dynamicpipeline/java/jgrapht-0.8.1/jgrapht-jdk1.6.jar:/xxx/dynamicpipeline/java/" SetPipeline
}}}
 * windows: 
{{{
java -cp xxx\dynamicpipeline\java\jgrapht-0.8.1\jgrapht-jdk1.6.jar;xxx\dynamicpipeline\java\ SetPipeline
}}}

Where "xxx" is the absolute path on your machine. Use the same command for class "AvailablePipelines".

Before running the java programs you must (i) populate the folder "tools/" with the tools you want to include in your pipeline system; and (ii) instantiate the Tool Registry (registry/ToolRegistry.txt) with information about those tools. Read the document on the Wiki section about how to incorporate your tools.

= Requirements for the PHP Interface =

  * Configure index.php javaclasspath according to your operating system:
{{{
  "$path/jgrapht-0.8.1/jgrapht-jdk1.6.jar:$path"
}}}
Substitute ":" by ";" if you are using Windows. For Linux, no change is needed.


= Outputs =

The SetPipeline class returns the path for four output files, in this order:
{{{
pipeline<timestamp>.inputs
pipeline<timestamp>.exec
pipeline<timestamp>.outputs
pipeline<timestamp>.err
}}}
OR

There is no available path.

These files are stored in the folder "pipelines/".
It also generates two other output files and creates a pipeline-specific folder inside the folder "pipelines/":
{{{
pipeline<timestamp>.txt
pipeline<timestamp>.log
<timestamp>/
}}}
The AvailablePipelines class returns a comma-delimited String of possible end points with available paths from a specific start point (or input_format). Example of output, referring to possible conversion formats for the start point format SDAT:
{{{
PrettyBase,SDAT,PHASE_Format,NEXUS,Structure_Format,R_Genetics,R_Hierfstat
}}}